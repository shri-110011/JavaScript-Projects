{"version":3,"sources":["./src/environments/environment.ts","./src/app/warning-alert/warning-alert.component.ts","./src/app/warning-alert/warning-alert.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/success-alert/success-alert.component..ts","./src/app/success-alert/success-alert.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-warning-alert',\n  templateUrl: './warning-alert.component.html',\n  styles: [`\n    p{\n        color: red;\n        background-color: mistyrose;\n        padding: 20px;\n        border: 1px solid red;\n    }\n  `]\n})\nexport class WarningAlertComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>The process has lead to some warning messages!</p>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  // styleUrls: ['./app.component.css'],\n  styles: [`\n    .styleLog{\n      color: white;\n    }\n  `]\n})\nexport class AppComponent {\n  username = \"\";\n  nameCreationStatus = false;\n\n  secretMsg = \"I am learning Angular.\";\n  msgVisibility = false;\n  arr = [];\n  updateBtnStatus(){\n    if(this.username.length!=0){\n      this.nameCreationStatus = true;\n    }\n    else{\n      this.nameCreationStatus = false;\n    }\n  }\n  resetName(){\n    this.username=\"\";\n  }\n  toggleMsg(){\n    // this.arr.push(this.arr.length+1);\n    this.arr.push(new Date);\n    this.msgVisibility = !this.msgVisibility;\n  }\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-xs-12\">\n      <!-- <ol>\n        <li>Create two new Components (manually or with CLI): WarningAlert and SuccessAlert</li>\n        <li>Output them beneath each other in the AppComponent</li>\n        <li>Output a warning or success message in the Components</li>\n        <li>Style the Components appropriately (maybe some red/ green text?)</li>\n      </ol>\n      <p>Use external or internal templates and styles!</p>\n      <p>Feel free to create more components, nest them into each other or play around with different types of selectors!</p>\n    \n      <app-warning-alert></app-warning-alert>\n      <app-success-alert></app-success-alert> -->\n\n      <!-- <ol>\n        <li>Add a Input field which updates a property ('username') via Two-Way-Binding</li>\n        <li>Output the username property via String Interpolation (in a paragraph below the input)</li>\n        <li>Add a button which may only be clicked if the username is NOT an empty string</li>\n        <li>Upon clicking the button, the username should be reset to an empty string</li>\n      </ol>\n\n      <label for=\"uname\">User Name</label>\n      <input type=\"text\" id=\"uname\" class=\"form-control\" [(ngModel)]=\"username\" (input)=\"updateBtnStatus()\"/>\n      <p>{{ username }}</p> -->\n      <!-- <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"!nameCreationStatus\" (click)=\"resetName()\">Reset Name</button> -->\n      <!-- <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"username===''\" (click)=\"username=''\">Reset Name</button> -->\n\n      <ol>\n        <li>Add A button which says 'Display Details'</li>\n        <li>Add a paragraph with any content of your choice (e.g. 'Secret Password = tuna')</li>\n        <li>Toggle the displaying of that paragraph with the button created in the first step</li>\n        <li>Log all button clicks in an array and output that array below the secret paragraph (maybe log a timestamp or simply an incrementing number)</li>\n        <li>Starting at the 5th log item, give all future log items a blue background (via ngStyle) and white color (ngClass)</li>\n      </ol>\n      <hr>\n      <button type=\"button\" class=\"btn btn-primary\" (click)=\"toggleMsg()\">Display Details</button>\n      <p *ngIf=\"msgVisibility\">{{ secretMsg }}</p>\n      <p \n        *ngFor=\"let i of arr; let j = index\" \n        [ngClass]=\"{styleLog: j >= 4 ? true:false }\"\n        [ngStyle]=\"{backgroundColor: j >= 4 ? 'blue':'transparent'}\"\n      > {{ i }}\n      </p>\n\n    </div>\n  </div>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { WarningAlertComponent } from './warning-alert/warning-alert.component';\nimport { SuccessAlertComponent } from './success-alert/success-alert.component.';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    WarningAlertComponent,\n    SuccessAlertComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component } from \"@angular/core\";\r\n\r\n\r\n@Component({\r\n    selector: \"app-success-alert\",\r\n    templateUrl: \"./success-alert.component.html\",\r\n    styles: [`\r\n        p{\r\n            color: darkgreen;\r\n            background-color: #b0e9b0;\r\n            padding: 20px;\r\n            border: 1px solid green;\r\n        }\r\n    `]\r\n})\r\nexport class SuccessAlertComponent{\r\n\r\n}","<p>The process has been completed successfully!</p>","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}